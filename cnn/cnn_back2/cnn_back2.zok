const u32 N_TEST_EXAMPLES = 10;
const u32 N_IMAGE = 28;
const u64 EXTD_INPUT = 1000000;//10^6
const u64 EXTD_KERNEL = 1000000;//10^6
//const u64 EXTD_GRAD = 10000;//10^6
const u64 EXTD_LOSS = 1000000;//10^6
const u64 EXTD_WEIGHT = 1000000;//10^6
const u64 extd = 1000000;
const u32 NODE_NUM = 10;//输出节点个数，即预测的可能结果数量
const u32 FILTER_NUM = 2;
const u32 INPUT_LEN = 13*13*FILTER_NUM;//13*13*FILTER_NUM
const u32 KER_SIZE = 3;
const u32 POOL_SIZE = 2;

struct Relu_Back_Out {
    u64[13][13][FILTER_NUM] output;
    u64[INPUT_LEN][NODE_NUM] weights;
    u64[NODE_NUM] biases;
}

def div(u64 a, u64 b) -> u64{
    u64 minus = 9223372036854775807;
    u64 result = if(a<=minus && b<=minus) {a/b}\
                else { if(a>minus && b>minus) {(a*-1)/(b*-1)}\
                else {if(a>minus && b<=minus) {((a*-1)/b)*-1}\
                else { if(a<=minus && b>minus) {(a/(b*-1))*-1}\
                else {0} } } };
    return result;
}



def relu_backprop(u64[NODE_NUM]d_L_d_t,u64[INPUT_LEN][NODE_NUM] weights) -> u64[13][13][FILTER_NUM] {
//计算其他的
    //Relu_Back_Out mut out = Relu_Back_Out{output: , weights: weights, biases: biases };
    //u64[INPUT_LEN][NODE_NUM] mut d_L_d_w = [[0; NODE_NUM]; INPUT_LEN];
    //u64[NODE_NUM] mut d_L_d_b = [0; NODE_NUM];
    u64[13][13][FILTER_NUM] mut output = [[[0; FILTER_NUM]; 13]; 13];
    u64[INPUT_LEN] mut d_L_d_input = [0; INPUT_LEN];
    u64 lr = 1000;
    //u64[INPUT_LEN]  d_t_d_w = input_flat;
    u64[INPUT_LEN][NODE_NUM]  d_t_d_input = weights;

    // for u32 i in 0..INPUT_LEN {
    //     for u32 j in 0..NODE_NUM {
    //         d_L_d_w[i][j] = div(d_t_d_w[i] * d_L_d_t[j], EXTD_LOSS);//防止两次扩大
    //     }
    // }
    //d_L_d_b = d_L_d_t;
    for u32 i in 0..INPUT_LEN {
        for u32 j in 0..NODE_NUM {
            d_L_d_input[i] = d_L_d_input[i] + div(d_t_d_input[i][j] * d_L_d_t[j], EXTD_LOSS);//防止两次扩大
        }
    }
    //u64[INPUT_LEN][NODE_NUM] mut now_weights = weights;
    //u64[NODE_NUM] mut now_biases = biases;
    // for u32 i in 0..INPUT_LEN {
    //     for u32 j in 0..NODE_NUM {
    //         out.weights[i][j] = div(out.weights[i][j] -  d_L_d_w[i][j], lr);//lr是整数，需要除法
    //     }
    // }
    // for u32 i in 0..NODE_NUM {
    //     out.biases[i] = div(out.biases[i] - d_L_d_b[i], lr);//lr是整数，需要除法
    // }

    // //reshape
    u32 mut index = 0;
    //u64[13][13][FILTER_NUM] mut output = [[[0; FILTER_NUM]; 13]; 13];
    for u32 i in 0..13{
        for u32 j in 0..13 {
            for u32 k in 0..FILTER_NUM {
                output[i][j][k] = d_L_d_input[index];
                index = index + 1;
            }
        }
    }

    return output;//out.output.flatten() equal d_L_d_input
}
 def main(private u64[NODE_NUM]d_L_d_t) -> u64[13][13][FILTER_NUM] {

    u64[INPUT_LEN][NODE_NUM] mut weights = [[500000;NODE_NUM];INPUT_LEN];
    //u64[NODE_NUM] mut biases = [500000;NODE_NUM];
    //u64[FILTER_NUM][3][3] mut conv_kernel = [[[500000;3];3];FILTER_NUM];
    u64[13][13][FILTER_NUM] mut d_l_dinput = relu_backprop(d_L_d_t, weights);

    //u64[26][26][FILTER_NUM] mut pool_d_L_d_input = pool_backprop(relu_back_out.output, conv_output, pool_output);
    //conv_kernel = conv_backprop(pool_d_L_d_input, conv_kernel, train_examples);
    return d_l_dinput;
 }