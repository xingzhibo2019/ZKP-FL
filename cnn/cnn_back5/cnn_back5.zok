const u32 N_TEST_EXAMPLES = 10;
const u32 N_IMAGE = 28;
const u64 EXTD_INPUT = 1000000;//10^6
const u64 EXTD_KERNEL = 1000000;//10^6
//const u64 EXTD_GRAD = 10000;//10^6
const u64 EXTD_LOSS = 1000000;//10^6
const u64 EXTD_WEIGHT = 1000000;//10^6
const u64 extd = 1000000;
const u32 NODE_NUM = 10;//输出节点个数，即预测的可能结果数量
const u32 FILTER_NUM = 2;
const u32 INPUT_LEN = 13*13*FILTER_NUM;//13*13*FILTER_NUM
const u32 KER_SIZE = 3;
const u32 POOL_SIZE = 2;

def div(u64 a, u64 b) -> u64{
    u64 minus = 9223372036854775807;
    u64 result = if(a<=minus && b<=minus) {a/b}\
                else { if(a>minus && b>minus) {(a*-1)/(b*-1)}\
                else {if(a>minus && b<=minus) {((a*-1)/b)*-1}\
                else { if(a<=minus && b>minus) {(a/(b*-1))*-1}\
                else {0} } } };
    return result;
}

def conv_backprop(u64[26][26][FILTER_NUM] d_L_d_out, u64[FILTER_NUM][3][3] conv_kernel, u64[28][28] input) -> u64[FILTER_NUM][3][3] {
    u64[FILTER_NUM][3][3] mut d_L_d_filter = [[[0; 3]; 3]; FILTER_NUM];
    u64 lr = 1000;

    for u32 i in 0..(28-2) {
        for u32 j in 0..(28-2) {
            for u32 f in 0..FILTER_NUM {
                for u32 i2 in 0..3 {
                    for u32 j2 in 0..3 {
                        d_L_d_filter[f][i2][j2] = d_L_d_filter[f][i2][j2] + d_L_d_out[i][j][f] * input[i+i2][j+j2];//只有d_L_d_out扩大了
                    }
                }
            }
        }
    }
    u64[FILTER_NUM][3][3] mut now_kernel = [[[0; 3]; 3]; FILTER_NUM];
    for u32 i in 0..FILTER_NUM {
        for u32 j in 0..3 {
            for u32 k in 0..3 {
                d_L_d_filter[i][j][k] = div(d_L_d_filter[i][j][k], extd);
                now_kernel[i][j][k] = div(conv_kernel[i][j][k] - d_L_d_filter[i][j][k], lr);//lr是整数，需要除法
            }
        }
    }
    return now_kernel;
}

def pool_backprop(u64[13][13][FILTER_NUM] d_L_d_out, u64[26][26][FILTER_NUM] input,  u64[13][13][FILTER_NUM] output) -> u64[26][26][FILTER_NUM] {
    u64[26][26][FILTER_NUM] mut d_L_d_input = [[[0; FILTER_NUM]; 26]; 26];

    u64[FILTER_NUM] mut max = [0; FILTER_NUM];
    for u32 i in 0..13 {
        for u32 j in 0..13 {
            max = output[i][j];
            //对图像的2*2切片遍历
            for u32 i2 in 0..2 {
                for u32 j2 in 0..2 {
                    for u32 f2 in 0..FILTER_NUM {
                        d_L_d_input[i*2+i2][j*2+j2][f2] = if(max[f2] == input[i*2+i2][j*2+j2][f2]) {d_L_d_out[i][j][f2]} else {0};
                    }
                }
            }
        }
    }

    return d_L_d_input;
}

def relu_backprop(u64[NODE_NUM]d_L_d_t, u64[NODE_NUM] biases) -> u64[NODE_NUM] {

    u64[NODE_NUM] mut d_L_d_b = [0; NODE_NUM];
    u64 lr = 1000;
    //d_L_d_b = d_L_d_t;
    
    d_L_d_b = d_L_d_t;
    u64[NODE_NUM] mut now_biases = biases;

    for u32 i in 0..NODE_NUM {
        now_biases[i] = div(now_biases[i] - d_L_d_b[i], lr);//lr是整数，需要除法
    }

    return now_biases;
}

def main(private u64[28][28]train_examples,private u64[NODE_NUM]d_L_d_t,private u64[13][13][FILTER_NUM]dl_dinput,private u64[26][26][FILTER_NUM] conv_output,\
                        private u64[13][13][FILTER_NUM] pool_output) -> (u64[NODE_NUM],u64[FILTER_NUM][3][3]) {

    //u64[INPUT_LEN][NODE_NUM] mut weights = [[500000;NODE_NUM];INPUT_LEN];
    u64[NODE_NUM] mut biases = [500000;NODE_NUM];
    u64[FILTER_NUM][3][3] mut conv_kernel = [[[500000;3];3];FILTER_NUM];
    u64[NODE_NUM] mut out = relu_backprop(d_L_d_t, biases);

    u64[26][26][FILTER_NUM] mut pool_d_L_d_input = pool_backprop(dl_dinput, conv_output, pool_output);
    conv_kernel = conv_backprop(pool_d_L_d_input, conv_kernel, train_examples);
    return (out,conv_kernel);
 }